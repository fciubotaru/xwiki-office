#region LGPL license
/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
#endregion //license

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ContentFiltering.Office.Word.Cleaners
{
    /// <summary>
    /// Corrects the &lt;img&gt; and &lt;br&gt; tags generated by Word.
    /// </summary>
    class CorrectTagsClosingCleaner : IHTMLCleaner
    {
        private string tagName;

        /// <summary>
        /// Cleaner constructor.
        /// </summary>
        /// <param name="tagName">The name if the tag. Eg: "img", "br".</param>
        public CorrectTagsClosingCleaner(string tagName)
        {
            this.tagName = tagName;
        }

        #region IHTMLCleaner Members

        /// <summary>
        /// Corrects the img and br tags generated by Word.
        /// </summary>
        /// <param name="htmlSource">The html source to be corrected.</param>
        /// <returns>The corrected html coe.</returns>
        public string Clean(string htmlSource)
        {
            //The string builder will be appendend when more then 1000 corrupted tags are found.
            int slack = 1000;
            string correctionString = " /";
            string searchedString = "<" + tagName;
            StringBuilder sb = new StringBuilder(htmlSource.Length + slack);
            sb.Insert(0, htmlSource);
            int startIndex = 0;
            int endIndex = 0;
            int nonValidTags = 0;
            do
            {
                startIndex = htmlSource.IndexOf(searchedString, endIndex);
                if (startIndex >= 0)
                {
                    endIndex = htmlSource.IndexOf('>', startIndex);
                    if (endIndex > 0)
                    {
                        //The tag is missing  the '/' before the '>' character
                        if (!(htmlSource[endIndex - 1].CompareTo('/') == 0))
                        {
                            sb.Insert(endIndex + nonValidTags * correctionString.Length, correctionString);
                            nonValidTags++;
                        }
                    }
                }
            } while (startIndex < (htmlSource.Length - 1) && endIndex < (htmlSource.Length - 1) && (startIndex >= 0) && (endIndex >= 0));
            return sb.ToString();
        }

        #endregion IHTMLCleaner Members
    }
}